// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAccountLogFieldNames          = builder.RawFieldNames(&UserAccountLog{})
	userAccountLogRows                = strings.Join(userAccountLogFieldNames, ",")
	userAccountLogRowsExpectAutoSet   = strings.Join(stringx.Remove(userAccountLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	userAccountLogRowsWithPlaceHolder = strings.Join(stringx.Remove(userAccountLogFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	userAccountLogModel interface {
		Insert(ctx context.Context, data *UserAccountLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAccountLog, error)
		Update(ctx context.Context, data *UserAccountLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAccountLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserAccountLog struct {
		Id              int64     `db:"id"`
		UserId          int64     `db:"user_id"`           // 用户ID
		PaymentId       int64     `db:"payment_id"`        // 支付ID
		OrderNum        string    `db:"order_num"`         // 订单号（非订单类收退款此字符为空）
		OpBeforeBalance float64   `db:"op_before_balance"` // 操作之前账户余额
		OpPrices        float64   `db:"op_prices"`         // 操作金额
		OpAfterBalance  float64   `db:"op_after_balance"`  // 操作之后账户余额
		Type            int64     `db:"type"`              // 操作类型 1：支付订单 2：退货 3：补偿发放 4：购买会员
		UpdateTime      time.Time `db:"update_time"`
		CreateTime      time.Time `db:"create_time"`
	}
)

func newUserAccountLogModel(conn sqlx.SqlConn) *defaultUserAccountLogModel {
	return &defaultUserAccountLogModel{
		conn:  conn,
		table: "`user_account_log`",
	}
}

func (m *defaultUserAccountLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserAccountLogModel) FindOne(ctx context.Context, id int64) (*UserAccountLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAccountLogRows, m.table)
	var resp UserAccountLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAccountLogModel) Insert(ctx context.Context, data *UserAccountLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, userAccountLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PaymentId, data.OrderNum, data.OpBeforeBalance, data.OpPrices, data.OpAfterBalance, data.Type)
	return ret, err
}

func (m *defaultUserAccountLogModel) Update(ctx context.Context, data *UserAccountLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAccountLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.PaymentId, data.OrderNum, data.OpBeforeBalance, data.OpPrices, data.OpAfterBalance, data.Type, data.Id)
	return err
}

func (m *defaultUserAccountLogModel) tableName() string {
	return m.table
}
